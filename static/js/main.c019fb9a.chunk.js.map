{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","capacityOptions","value","label","stateOptions","App","state","capacity","result","handleChangeCapacity","setState","handleChangeState","getResult","this","className","src","logo","alt","onChange","options","type","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wFAAAA,EAAOC,QAAU,IAA0B,kC,6NCKrCC,G,MAAkB,CACtB,CAAEC,MAAO,MAAOC,MAAO,OACvB,CAAED,MAAO,MAAOC,MAAO,OACvB,CAAED,MAAO,MAAOC,MAAO,SAEnBC,EAAe,CACnB,CAAEF,MAAO,MAAOC,MAAO,MACvB,CAAED,MAAO,MAAOC,MAAO,MACvB,CAAED,MAAO,MAAOC,MAAO,OA4DVE,E,2MAxDbC,MAAQ,CACNC,SAAU,CACRL,MAAO,EACPC,MAAO,MAETG,MAAO,CACLJ,MAAO,EACPC,MAAO,MAETK,OAAQ,M,EAEVC,qBAAuB,SAAAF,GACrB,EAAKG,SAAS,CAAEH,c,EAElBI,kBAAoB,SAAAL,GAClB,EAAKI,SAAS,CAAEJ,W,EAElBM,UAAY,WACV,IACMJ,EADW,EAAKF,MAAMC,SAASL,MACX,EAC1B,EAAKQ,SAAS,CAAEF,Y,wEAER,IAAD,EAC6BK,KAAKP,MAAjCC,EADD,EACCA,SAAUC,EADX,EACWA,OAAQF,EADnB,EACmBA,MAC1B,OACE,yBAAKQ,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,UAE3C,yBAAKH,UAAU,WACb,yBAAKA,UAAU,SAAf,kCACA,kBAAC,IAAD,CACEZ,MAAOK,EACPW,SAAUL,KAAKJ,qBACfU,QAASlB,EACTa,UAAU,WAEZ,yBAAKA,UAAU,SAAf,uBACA,kBAAC,IAAD,CACEZ,MAAOI,EACPY,SAAUL,KAAKF,kBACfQ,QAASf,EACTU,UAAU,YAGd,yBAAKA,UAAU,eACb,4BAAQM,KAAK,OAAON,UAAU,SAASO,QAASR,KAAKD,WAArD,cAGCJ,Q,GAlDOc,IAAMC,WCJJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.c019fb9a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport Select from \"react-select\";\nimport \"./App.css\";\n\nconst capacityOptions = [\n  { value: \"300\", label: \"2.0\" },\n  { value: \"400\", label: \"2.1\" },\n  { value: \"500\", label: \"2.2\" }\n];\nconst stateOptions = [\n  { value: \"300\", label: \"tx\" },\n  { value: \"400\", label: \"la\" },\n  { value: \"500\", label: \"nc\" }\n];\n\nclass App extends React.Component {\n  state = {\n    capacity: {\n      value: 0,\n      label: null\n    },\n    state: {\n      value: 0,\n      label: null\n    },\n    result: null\n  };\n  handleChangeCapacity = capacity => {\n    this.setState({ capacity });\n  };\n  handleChangeState = state => {\n    this.setState({ state });\n  };\n  getResult = () => {\n    const capacity = this.state.capacity.value;\n    const result = capacity - 5;\n    this.setState({ result });\n  };\n  render() {\n    const { capacity, result, state } = this.state;\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        </header>\n        <div className=\"content\">\n          <div className=\"label\">Please select Vehicle capacity</div>\n          <Select\n            value={capacity}\n            onChange={this.handleChangeCapacity}\n            options={capacityOptions}\n            className=\"select\"\n          />\n          <div className=\"label\">Please select state</div>\n          <Select\n            value={state}\n            onChange={this.handleChangeState}\n            options={stateOptions}\n            className=\"select\"\n          />\n        </div>\n        <div className=\"buttonBlock\">\n          <button type=\"text\" className=\"button\" onClick={this.getResult}>\n            Calculate:\n          </button>\n          {result}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}